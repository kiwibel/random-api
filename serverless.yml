
service: randomApi
# app and org for use with dashboard.serverless.com
app: random-api
# org: vacoine   # Will need to use TrendMicro organization account
# Commented out because free plan for Serverless dashboard does not allow adding members and generating tokens for CI/CD
# If you want to use dashboard locally, can uncomment it (but don't commit/push to GitHub!)

plugins:
  - serverless-plugin-aws-alerts
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: ap-southeast-2

custom:
  env:
    config: /trendmicro/randomapi/${self:provider.stage}/${self:provider.region}

  dashboards: true
  
  documentation:
    api:
      info:
        version: "1.0.0" 
        title: "randomAPI" 
        description: "Simple API returning random status codes"
        contact:
          name: "Vadim Chausov"
          email: "vc@vadim.nz"
    resources:
      -
        path: "prod/hello"
        description: "Returns random status code and request's metadata"

  alerts:
  
    nameTemplate: $[functionName]-$[metricName]
    prefixTemplate: Lambda-$[stackName]
    topics:
      nonCritical:
        alarm:
          topic: alarms-warning
        ok:
          topic: alarms-warning-ok
      critical:
        alarm:
          topic: alarms-critical
        ok:
          topic: alarms-critical-ok
  
  # Default alarm definition from the plugin
    alarms: 
     - functionDuration
     - functionThrottles
     - functionErrors
     - highUsageRate

  # Tweaked alarm definitions  and overrides
    definitions:

      functionDuration:
        treatMissingData: notBreaching

      functionThrottles:
        description: 'Function Throttles. Dropping requests. Function: $[functionName] Priority=P1'
        treatMissingData: notBreaching
        evaluationPeriods: 5
        datapointsToAlarm: 5
        okActions:
          - critical
        alarmActions:
          - critical

      functionErrors:
        description: 'Error occurred in a function. Function: $[functionName] Priority=P1'
        enabled: true
        treatMissingData: notBreaching
        okActions:
          - critical
        alarmActions:
          - critical

      highUsageRate:
        description: 'Function is getting called frequently. Function: $[functionName] Priority=P3'
        namespace: 'AWS/Lambda'
        enabled: true
        treatMissingData: notBreaching
        nameTemplate: $[functionName]_high_invocation_rate
        metric: Invocations
        threshold: 60
        statistic: Sum
        period: 60
        evaluationPeriods: 5
        comparisonOperator: GreaterThanOrEqualToThreshold
        alarmActions:
          - nonCritical
        okActions:
          - nonCritical

functions:
  hello:
    handler: handler.hello
    memorySize: 128
    description: Returns random status code from [400,500,200]
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: hello
          method: get





















































