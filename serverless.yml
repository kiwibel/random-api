# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: randomApi
# app and org for use with dashboard.serverless.com
app: random-api
# org: vacoine   # Will need to use TrendMicro organization account
# Commented out because free plan for Serverless dashboard does not allow adding members and generating tokens for CI/CD
# If you want to use dashboard locally, can uncomment it (but don't commit/push to GitHub!)

plugins:
  - serverless-plugin-aws-alerts
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: ap-southeast-2

custom:
  env:
    config: /trendmicro/randomapi/${self:provider.stage}/${self:provider.region}

  dashboards: true
  
  documentation:
    api:
      info:
        version: "1.0.0" 
        title: "randomAPI" 
        description: "Simple API returning random status codes"
        contact:
          name: "Vadim Chausov"
          email: "vc@vadim.nz"
    resources:
      -
        path: "https://jw64f0zc20.execute-api.ap-southeast-2.amazonaws.com/prod/hello"
        description: "Returns random status code and request's metadata"

  alerts:
  
    nameTemplate: $[functionName]-$[metricName]
    prefixTemplate: Lambda-$[stackName]
    topics:
      nonCritical:
        alarm:
          topic: alarms-warning
        ok:
          topic: alarms-warning-ok
      critical:
        alarm:
          topic: alarms-critical
        ok:
          topic: alarms-critical-ok
  
  # Default alarm definition from the plugin
    alarms: 
     - functionDuration
     - functionThrottles
     - functionErrors
     - highUsageRate

  # Tweaked alarm definitions  and overrides
    definitions:

      functionDuration:
        treatMissingData: notBreaching

      functionThrottles:
        description: 'Function Throttles. Dropping requests. Function: $[functionName] Priority=P1'
        treatMissingData: notBreaching
        evaluationPeriods: 5
        datapointsToAlarm: 5
        okActions:
          - critical
        alarmActions:
          - critical

      functionErrors:
        description: 'Error occurred in a function. Function: $[functionName] Priority=P1'
        enabled: true
        treatMissingData: notBreaching
        okActions:
          - critical
        alarmActions:
          - critical

      highUsageRate:
        description: 'Function is getting called frequently. Function: $[functionName] Priority=P3'
        namespace: 'AWS/Lambda'
        enabled: true
        treatMissingData: notBreaching
        nameTemplate: $[functionName]_high_invocation_rate
        metric: Invocations
        threshold: 60
        statistic: Sum
        period: 60
        evaluationPeriods: 5
        comparisonOperator: GreaterThanOrEqualToThreshold
        alarmActions:
          - nonCritical
        okActions:
          - nonCritical
      
#  customDomain:
#    domainName: vadim.nz
#    basePath: random
#    stage: ${self:provider.stage}
#    createRoute53Record: true  
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    memorySize: 128
    description: Returns random status code from [400,500,200]
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: hello
          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"





















































